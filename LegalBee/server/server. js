const express = require("express");
const cors = require("cors");
const multer = require("multer");
const Tesseract = require("tesseract.js");
const { OpenAI } = require("openai");
require("dotenv").config();

const app = express();
app.use(cors());
app.use(express.json());

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

const upload = multer({ storage: multer.memoryStorage() });

app.post("/api/ask", async (req, res) => {
  try {
    const { question } = req.body;

    const chat = await openai.chat.completions.create({
      model: "gpt-4",
      messages: [
        {
          role: "system",
          content: "You are a helpful legal assistant. Simplify legal advice in plain language.",
        },
        {
          role: "user",
          content: question,
        },
      ],
    });

    const reply = chat.choices[0].message.content;
    res.json({ reply });
  } catch (err) {
    console.error(err);
    res.status(500).json({ reply: "AI failed to respond. Please try again." });
  }
});

app.post("/api/upload", upload.single("file"), async (req, res) => {
  try {
    const imageBuffer = req.file.buffer;

    const result = await Tesseract.recognize(imageBuffer, "eng");
    const text = result.data.text;

    const chat = await openai.chat.completions.create({
      model: "gpt-4",
      messages: [
        {
          role: "system",
          content: "You are a legal assistant. Simplify this document for easy understanding.",
        },
        {
          role: "user",
          content: text,
        },
      ],
    });

    res.json({ text: chat.choices[0].message.content });
  } catch (error) {
    console.error(error);
    res.status(500).json({ text: "OCR or AI failed. Try again." });
  }
});

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  console.log(`LegalBee server running on port ${PORT}`);
});
